@page "{subjectId:int}/{quizId:int}"
@model Quizpractice.Pages.Quizs.IndexModel

<!-- Hiển thị thông báo kết quả trả lời -->
@if (TempData["Result"] != null)
{
    <div class="alert alert-info">
        @TempData["Result"]
    </div>
}

<div class="review-progress-container">
    <div class="review-progress-header">
        <h2>Progress</h2>
    </div>
    <div class="review-progress-content">
        <p>
            Time Remaining: <span id="timer" style="font-weight: bold; color: red;">
                @((Model.Duration / 60).ToString("00")):@((Model.Duration % 60).ToString("00"))
            </span>
        </p> <!-- Timer -->
        <p>Review before scoring exam..</p>
        <div class="progress-options">
            <div class="option unanswered">UNANSWERED</div>
            <div class="option answered">ANSWERED</div>
            <div class="option all-questions">ALL QUESTIONS</div>
        </div>
        <div class="progress-numbers">
            @for (int i = 1; i <= Model.Questions.Count; i++)
            {
                var questionId = Model.Questions[i - 1].QuestionId;
                var answerStatus = HttpContext.Session.GetInt32($"Answer_{questionId}");

                <a href="@Url.Page("/Quizs/Detail", new { questionId = questionId, subjectId = Model.SubjectId })">
                    <div class="number @(answerStatus.HasValue ? "answered" : "unanswered")">
                        @i
                    </div>
                </a>
            }
        </div>
        <div class="score-exam-btn">
            <form id="scoreExamForm" method="post" asp-page-handler="ScoreExam">
                <button type="button" class="btn btn-primary" onclick="submitExam()">SCORE EXAM NOW</button>
            </form>
        </div>
    </div>
</div>

<script>
    // Lấy thời gian từ sessionStorage hoặc từ Razor Model
    // Lấy thời gian từ sessionStorage hoặc từ Razor Model
    var storedTime = sessionStorage.getItem("timeRemaining");
    if (storedTime && duration>storedTime) {
        var duration = parseInt(storedTime);
    } else {
        // Nếu không có trong sessionStorage, lấy từ Razor Model (Session trong backend)
        var duration = @Model.Duration;
        sessionStorage.setItem("timeRemaining", duration); // Lưu vào sessionStorage lần đầu
    }

    function startTimer() {
        var timerElement = document.getElementById("timer");
        var timeRemaining = duration;

        var interval = setInterval(function () {
            timeRemaining--;
            sessionStorage.setItem("timeRemaining", timeRemaining); // Lưu thời gian còn lại vào sessionStorage
            timerElement.textContent = formatTime(timeRemaining);

            // Khi hết thời gian, dừng đếm ngược và tự động nộp bài
            if (timeRemaining <= 0) {
                sessionStorage.removeItem("timeRemaining");
                clearInterval(interval);
                alert("Time's up! Your exam will be submitted automatically.");
                document.getElementById("scoreExamForm").submit(); // Gửi form tự động
            }
        }, 1000);

        // Lưu lại thời gian trước khi rời khỏi trang
        window.addEventListener("beforeunload", function () {
            sessionStorage.setItem("timeRemaining", timeRemaining);
        });
    }

    // Định dạng thời gian thành phút:giây
    function formatTime(seconds) {
        var minutes = Math.floor(seconds / 60);
        var seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0');
    }

    // Bắt đầu đếm ngược
    startTimer();

    // Hàm gọi khi bấm nút SCORE EXAM NOW
    function submitExam() {
        sessionStorage.removeItem("timeRemaining");
        console.log("submitExam function is being called");
        document.getElementById("scoreExamForm").submit();
         // Xóa thời gian còn lại khi nộp bài
    }


</script>
